#include <stdio.h>
#include <inttypes.h> // For uint64_t and SCNx64
#include <stdio.h>
#include <stdint.h>

// Initial permutation (IP) table
static const int IP[] = {58, 50, 42, 34, 26, 18, 10, 2,
                         60, 52, 44, 36, 28, 20, 12, 4,
                         62, 54, 46, 38, 30, 22, 14, 6,
                         64, 56, 48, 40, 32, 24, 16, 8,
                         57, 49, 41, 33, 25, 17, 9, 1,
                         59, 51, 43, 35, 27, 19, 11, 3,
                         61, 53, 45, 37, 29, 21, 13, 5,
                         63, 55, 47, 39, 31, 23, 15, 7};

// Final permutation (FP) table
static const int FP[] = {40, 8, 48, 16, 56, 24, 64, 32,
                         39, 7, 47, 15, 55, 23, 63, 31,
                         38, 6, 46, 14, 54, 22, 62, 30,
                         37, 5, 45, 13, 53, 21, 61, 29,
                         36, 4, 44, 12, 52, 20, 60, 28,
                         35, 3, 43, 11, 51, 19, 59, 27,
                         34, 2, 42, 10, 50, 18, 58, 26,
                         33, 1, 41, 9, 49, 17, 57, 25};

// Expansion (E) table
static const int E[] = {32, 1, 2, 3, 4, 5,
                        4, 5, 6, 7, 8, 9,
                        8, 9, 10, 11, 12, 13,
                        12, 13, 14, 15, 16, 17,
                        16, 17, 18, 19, 20, 21,
                        20, 21, 22, 23, 24, 25,
                        24, 25, 26, 27, 28, 29,
                        28, 29, 30, 31, 32, 1};

// P-box permutation table
static const int P[] = {16, 7, 20, 21, 29, 12, 28, 17,
                        1, 15, 23, 26, 5, 18, 31, 10,
                        2, 8, 24, 14, 32, 27, 3, 9,
                        19, 13, 30, 6, 22, 11, 4, 25};

// S-boxes
static const int S1[64] = {
    14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7,
    0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8,
    4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0,
    15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13
};

// S2 box
static const int S2[64] = {
    15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10,
    3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5,
    0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15,
    13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9
};

// S3 box
static const int S3[64] = {
    10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8,
    13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1,
    13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7,
    1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12
};

// S4 box
static const int S4[64] = {
    7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15,
    13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9,
    10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4,
    3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14
};

// S5 box
static const int S5[64] = {
    2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9,
    14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6,
    4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14,
    11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3
};

// S6 box
static const int S6[64] = {
    12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11,
    10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8,
    9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6,
    4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13
};

// S7 box
static const int S7[64] = {
    4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1,
    13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6,
    1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2,
    6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12
};

// S8 box
static const int S8[64] = {
    13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7,
    1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2,
    7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8,
    2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11
};

// Permuted Choice 1 (PC-1) table
static const int PC1[] = {57, 49, 41, 33, 25, 17, 9,
                          1, 58, 50, 42, 34, 26, 18,
                          10, 2, 59, 51, 43, 35, 27,
                          19, 11, 3, 60, 52, 44, 36,
                          63, 55, 47, 39, 31, 23, 15,
                          7, 62, 54, 46, 38, 30, 22,
                          14, 6, 61, 53, 45, 37, 29,
                          21, 13, 5, 28, 20, 12, 4};

// Permuted Choice 2 (PC-2) table
static const int PC2[] = {14, 17, 11, 24, 1, 5,
                          3, 28, 15, 6, 21, 10,
                          23, 19, 12, 4, 26, 8,
                          16, 7, 27, 20, 13, 2,
                          41, 52, 31, 37, 47, 55,
                          30, 40, 51, 45, 33, 48,
                          44, 49, 39, 56, 34, 53,
                          46, 42, 50, 36, 29, 32};

// Left shift values for each round
static const int left_shifts[] = {1, 1, 2, 2, 2, 2, 2, 2,
                                  1, 2, 2, 2, 2, 2, 2, 1};

// Initial permutation for the data block (IP)
void initial_permutation(uint8_t data[64]) {
    uint8_t temp[64];
    for (int i = 0; i < 64; i++) {
        temp[i] = data[IP[i] - 1];
    }
    for (int i = 0; i < 64; i++) {
        data[i] = temp[i];
    }
}

// Final permutation for the data block (FP)
void final_permutation(uint8_t data[64]) {
    uint8_t temp[64];
    for (int i = 0; i < 64; i++) {
        temp[i] = data[FP[i] - 1];
    }
    for (int i = 0; i < 64; i++) {
        data[i] = temp[i];
    }
}

// Permuted Choice 1 (PC-1) for key generation
void permuted_choice_1(uint8_t key[64], uint8_t key_pc1[56]) {
    for (int i = 0; i < 56; i++) {
        key_pc1[i] = key[PC1[i] - 1];
    }
}

// Permuted Choice 2 (PC-2) for key generation
void permuted_choice_2(uint8_t key_pc1[56], uint8_t key_pc2[48]) {
    for (int i = 0; i < 48; i++) {
        key_pc2[i] = key_pc1[PC2[i] - 1];
    }
}

// Perform left circular shift on the key
void left_circular_shift(uint8_t key[56], int shift) {
    uint8_t temp[56];
    for (int i = 0; i < 56; i++) {
        temp[i] = key[i];
    }
    for (int i = 0; i < 28; i++) {
        key[i] = temp[(i + shift) % 28];
        key[i + 28] = temp[(i + shift) % 28 + 28];
    }
}

// Generate 16 subkeys for each round
void generate_subkeys(uint8_t key[64], uint8_t round_keys[16][48]) {
    uint8_t key_pc1[56];
    permuted_choice_1(key, key_pc1);

    for (int i = 0; i < 16; i++) {
        left_circular_shift(key_pc1, left_shifts[i]);
        permuted_choice_2(key_pc1, round_keys[i]);
    }
}

// Perform the expansion (E) operation
void expansion(uint8_t input[32], uint8_t output[48]) {
    for (int i = 0; i < 48; i++) {
        output[i] = input[E[i] - 1];
    }
}

// XOR two binary arrays of the same length
void xor_arrays(uint8_t arr1[], uint8_t arr2[], int length) {
    for (int i = 0; i < length; i++) {
        arr1[i] ^= arr2[i];
    }
}

// Perform the substitution using an S-box
void substitution(uint8_t input[48], uint8_t output[32], const int sbox[64][16]) {
    for (int i = 0; i < 8; i++) {
        int row = (input[i * 6] << 1) + input[i * 6 + 5];
        int col = (input[i * 6 + 1] << 3) + (input[i * 6 + 2] << 2) +
                  (input[i * 6 + 3] << 1) + input[i * 6 + 4];
        int value = sbox[i * 64 + row * 16 + col];
        for (int j = 0; j < 4; j++) {
            output[i * 4 + j] = (value >> (3 - j)) & 1;
        }
    }
}

// Perform the permutation (P) operation
void permutation(uint8_t input[32], uint8_t output[32]) {
    for (int i = 0; i < 32; i++) {
        output[i] = input[P[i] - 1];
    }
}

// Feistel function
void feistel_function(uint8_t input[32], uint8_t subkey[48]) {
    uint8_t expanded[48];
    expansion(input, expanded);
    xor_arrays(expanded, subkey, 48);

    uint8_t substituted[32];
    substitution(expanded, substituted, S1);
    permutation(substituted, input);
}

// Perform DES encryption on a single block
void des_encrypt_block(uint8_t block[64], uint8_t key[64], uint8_t encrypted_block[64]) {
    // Initial permutation
    initial_permutation(block);

    // Generate subkeys
    uint8_t round_keys[16][48];
    generate_subkeys(key, round_keys);

    // Split the block into two halves
    uint8_t left[32], right[32];
    for (int i = 0; i < 32; i++) {
        left[i] = block[i];
        right[i] = block[i + 32];
    }

    // 16 rounds of encryption
    for (int round = 0; round < 16; round++) {
        uint8_t temp[32];
        for (int i = 0; i < 32; i++) {
            temp[i] = right[i];
        }
        feistel_function(right, round_keys[round]);
        xor_arrays(right, left, 32);
        for (int i = 0; i < 32; i++) {
            left[i] = temp[i];
        }
    }

    // Swap left and right
    uint8_t temp[32];
    for (int i = 0; i < 32; i++) {
        temp[i] = left[i];
        left[i] = right[i];
        right[i] = temp[i];
    }

    // Final permutation
    for (int i = 0; i < 32; i++) {
        encrypted_block[i] = left[i];
        encrypted_block[i + 32] = right[i];
    }
    final_permutation(encrypted_block);
}

// Example usage
#include <stdio.h>

// ... (Rest of the DES code)

int main() {
    // Example 64-bit plaintext block and key
    uint8_t plaintext[64];
    uint8_t key[64];

    printf("Enter 64-bit plaintext block (16 hexadecimal digits): ");
    if (scanf("%16" SCNx64, (uint64_t *)plaintext) != 1) {
        printf("Invalid input for plaintext.\n");
        return 1;
    }

    printf("Enter 64-bit key (16 hexadecimal digits): ");
    if (scanf("%16" SCNx64, (uint64_t *)key) != 1) {
        printf("Invalid input for key.\n");
        return 1;
    }

    uint8_t encrypted_block[64];
    des_encrypt_block(plaintext, key, encrypted_block);

    // Print the encrypted block
    printf("Encrypted Block:\n");
    for (int i = 0; i < 64; i++) {
        printf("%02X ", encrypted_block[i]);
        if ((i + 1) % 8 == 0) {
            printf("\n");
        }
    }

    return 0;
}
