#include <stdio.h>
#include <stdint.h>
#include<string.h>
static const uint8_t rcon[10] = {
    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36
};

// AES S-Box
static const uint8_t sbox[256] = {
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
};
static const uint8_t mixColumnsMatrix[4][4] = {
    {0x02, 0x03, 0x01, 0x01},
    {0x01, 0x02, 0x03, 0x01},
    {0x01, 0x01, 0x02, 0x03},
    {0x03, 0x01, 0x01, 0x02}
};

uint8_t mul2(uint8_t value);
uint8_t mul3(uint8_t value);


void SubBytes(uint8_t state[4][4]) {
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            // Extract the row and column index for the S-Box
            uint8_t row = (state[i][j] >> 4) & 0x0F;
            uint8_t col = state[i][j] & 0x0F;

            // Substitute the byte with the corresponding S-Box value
            state[i][j] = sbox[row * 16 + col];
        }
    }
}

void AddRoundKey(uint8_t state[4][4], uint8_t roundKey[4][4]) {
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            state[i][j] ^= roundKey[i][j];
        }
    }
}

void KeyExpansion(const uint8_t key[16], uint8_t roundKeys[11][4][4]) {
    int round, i, j;

    // Copy the original key to the first round key
    for (i = 0; i < 4; i++) {
        for (j = 0; j < 4; j++) {
            roundKeys[0][i][j] = key[i * 4 + j];
        }
    }

    for (round = 1; round <= 10; round++) {
        // Rotate word
        uint8_t temp[4];
        for (i = 0; i < 4; i++) {
            temp[i] = roundKeys[round - 1][i][3];
        }

        uint8_t tempByte = temp[0];
        for (i = 0; i < 3; i++) {
            temp[i] = temp[i + 1];
        }
        temp[3] = tempByte;

        // SubBytes
        for (i = 0; i < 4; i++) {
            temp[i] = sbox[temp[i]];
        }

        // XOR with Rcon
        temp[0] ^= rcon[round - 1];

        // XOR with the previous round's first word
        for (i = 0; i < 4; i++) {
            temp[i] ^= roundKeys[round - 1][i][0];
        }

        // Generate the rest of the round key
        for (i = 0; i < 4; i++) {
            for (j = 0; j < 4; j++) {
                roundKeys[round][i][j] = roundKeys[round - 1][i][j] ^ temp[i];
            }
        }
    }
}

void ShiftRows(uint8_t state[4][4]) {
    // Implement ShiftRows transformation
    for (int i = 1; i < 4; i++) {
        uint8_t temp[4];
        for (int j = 0; j < 4; j++) {
            temp[j] = state[i][(j + i) % 4];
        }
        for (int j = 0; j < 4; j++) {
            state[i][j] = temp[j];
        }
    }
}

void MixColumns(uint8_t state[4][4]) {
    // Implement MixColumns transformation
    uint8_t temp[4][4];

    for (int c = 0; c < 4; c++) {
        temp[0][c] = (uint8_t)(mul2(state[0][c]) ^ mul3(state[1][c]) ^ state[2][c] ^ state[3][c]);
        temp[1][c] = (uint8_t)(state[0][c] ^ mul2(state[1][c]) ^ mul3(state[2][c]) ^ state[3][c]);
        temp[2][c] = (uint8_t)(state[0][c] ^ state[1][c] ^ mul2(state[2][c]) ^ mul3(state[3][c]));
        temp[3][c] = (uint8_t)(mul3(state[0][c]) ^ state[1][c] ^ state[2][c] ^ mul2(state[3][c]));
    }

    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            state[i][j] = temp[i][j];
        }
    }
}

// Helper function for MixColumns
uint8_t mul2(uint8_t value) {
    return (value << 1) ^ ((value >> 7) * 0x1B);
}

uint8_t mul3(uint8_t value) {
    return mul2(value) ^ value;
}


void AESEncryptionRounds(uint8_t state[4][4], uint8_t roundKeys[11][4][4]) {
    // Initial round (AddRoundKey)
    AddRoundKey(state, roundKeys[0]);

    for (int round = 1; round <= 10; round++) {
        SubBytes(state);
        ShiftRows(state);

        if (round < 10) {
            MixColumns(state);
        }

        AddRoundKey(state, roundKeys[round]);
    }
}
int main() {
    // AES 128-bit key
    uint8_t key[16] = {
        0x2B, 0x7E, 0x15, 0x16,
        0x28, 0xAE, 0xD2, 0xA6,
        0xAB, 0xF7, 0x97, 0x22,
        0x09, 0x28, 0x11, 0x12
    };

    // AES round keys
    uint8_t roundKeys[11][4][4];

    // Generate round keys
    KeyExpansion(key, roundKeys);

    // Input plaintext block (16 bytes)
    uint8_t state[4][4];

    // Read plaintext input from the console
    printf("Enter 16 characters for plaintext: ");
    char plaintext[17];
    fgets(plaintext, sizeof(plaintext), stdin);

 
    // Convert the input characters to bytes and fill the state matrix
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            state[i][j] = (uint8_t)plaintext[i * 4 + j];
        }
    }

    // Perform AES encryption rounds
    AESEncryptionRounds(state, roundKeys);

    // Print the ciphertext
    printf("Ciphertext:\n");
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            printf("%02X ", state[i][j]);
        }
        printf("\n");
    }

    return 0;
}